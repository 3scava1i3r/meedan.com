// Logo Layout
//
// A flex-based layout that handles many small blocks. It is implemented in several places. There is custom width handling on each image, where needed.
//
//
[class*='__logos'] {
  $width--card: units(22);
  background-color: $black-02;

  .logos {
    list-style-type: none;

    // Fallback to Flex layout
    @supports not((display: grid)) {
      display: flex;
      flex-flow: wrap row;
      justify-content: flex-start;
      margin: units(1) units(2) units(1) 0;
    }

    @supports (display: grid) {
      display: grid;
      grid-gap: units(2);
      grid-template-columns: repeat(auto-fill, minmax($width--card, 1fr));

      @include when-smaller-than(medium) {
        grid-gap: units(1);
        grid-template-columns: repeat(auto-fill, minmax($width--card - units(3), 1fr));
      }
    }

    li {
      @extend %card-flat;
      @include when-smaller-than(small) {
        margin-right: 0;
        width: 100%;
      }
      height: units(12);
      padding: 0;
    }

    a {
      align-items: center;
      display: flex;
      height: 100%;
      justify-content: center;
      padding: units(1);
      width: 100%;
    }

    // Default dimensions on the images
    img {
      max-height: units(9);
      max-width: units(16);
    }

    // Very square
    .first-draft,
    .ibm,
    .kiva,
    .dataguild,
    .hku,
    .hrc {
      img {
        max-height: units(9);
        max-width: units(9);
      }
    }

    // Very oblong
    .kf,
    .ff,
    .bcu,
    .bc,
    .amnesty,
    .shuttleworth,
    .gnl {
      img {
        max-height: units(16);
        max-width: units(20);
      }
    }

    // Oblong svg
    // (needed because by default svgs have `width: 100` inline)
    .kf img {
      width: units(16);
    }
  }
}
